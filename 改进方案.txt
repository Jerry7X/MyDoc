

配额和usage的记录都不要求非常精确，配额的实现依赖于bi。

加入2点：
1，每次都写新对象(可简化put一致性处理)
   存储总是多版本的，只是对外展示的时候屏蔽不可见版本。
   
2，一致性在数据库保证

其实需要事务的只有一个地方：
就是data entry，bilog，以及对象数量和size的计数。

关键点：
1，支持事务
2，并发粒度合适，有良好性能，尤其是list
3，支持增量，快速恢复，在异常时能快速恢复。
4，分布式，不存在单点故障


在schema设计上支持跨pool，跨多集群。

## 影响特性

几乎所有特性都收到影响