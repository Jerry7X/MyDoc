一些值得改进的地方：

1，使用rados存放bucket index
rados对象并发粒度大，恢复粒度大，强一致性对rgw可用性造成了非常大的影响。

1亿个对象的bucket，如果osd异常，可能仅写了几百个对象，但是可能有几千万key需要恢复。


2，通过hash方式访问对象，不经过bucket index
缺乏中间层，实现小文件合并(天生要求index层),对象跨pool都比较麻烦。

rados对象做index层几乎不可取。并发粒度太大，性能上抗不住。
如果通过对象属性来实现，就需要引入虚拟对象，这样rados对象数据在单个pool内剧增，其一致性保证也比较麻烦(rados没有跨对象的事务机制)

多版本的复杂实现就是其中一个例子（参考: rgw一致性）

3，元数据分散，需自行实现各种查询
甚至很多简单的查询命令都得额外开发。
无法支持各种灵活的视图。

4，multisite同步基于hash的shard
这样hash reshard之后，同步的元数据都需要调整。

5，杜绝覆盖写情况

对象改写情况本来就偏少，可以考虑保留其元数据，作为审计日志。

好处：
避免写之前的读属性操作
读写流程简化
恢复优化(恢复时只要对象存在就不需要恢复，恢复不必阻塞io，可以在io路径上直接完成恢复)

6,小文件合并

使用SSD cache可得到优化，但如果能小文件合并，减少inode，仍然有价值，特别是SSD容量不足的情况下。
对于元数据独立存放的系统更是如此，给ssd划分分区做不同目的使用会使得管理复杂，且故障影响扩散。

