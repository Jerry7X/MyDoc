基于现有rgw改造，主要利用现有rgw的http前端，以及s3协议处理逻辑。

要解决的问题：
1，支持metadata使用其他方式存放，解决rados object粒度过大的问题。
2，支持bi层，以实现数据跨pool，跨object storage的灵活存放。
   解决扩容，以及数据在不同系统中的流转问题。
3，改进多版本，双活实现机制，简化代码。降低软件复杂度。（这块存在残留bug，多版本与双活同步）
   将null作为一种特殊的instance来设计
   双活同步不基于bs(这是一种不合理的依赖)，同步由源端发起，简化逻辑和同步管理，查询等。
4，优化代码架构，rgw在RGWRados中就是一个大杂烩。
5，支持大量list操作
6，rgw依赖于ceph，而不是依赖于rados。要搞清楚依赖关系
    不仅是rados，不仅是cls，也不仅是common

改造rgw的存储实现方式。如下：
1，object storage作为一个抽象层，支持rados，本地盘，NFS，公有云等。
2，meta storage作为一个抽象层，支持mongodb，ceph，mysql等。

整体框架:
               http_frontend
			s3_protical  | s3_extend | tools
	 meta_stroage      |     object_storage
  mongodb | mysql | sqlite            rados | nfs |  oss     



支持bucket外源，支持多个外源，当数据不存在时，可以去外源读取数据。读取的数据会存在本地。

支持bucket的数据淘汰，基于数据访问频率。淘汰后可丢到其他存储，也可以直接删除（CDN功能）

支持数据冷却，冷却的数据按照淘汰策略淘汰。

支持配置bucket数据先存到本地SSD，以达到最大的iops。(本地盘模式可满足一些极端性能场景)

支持本地盘模式，用于系统自动化功能测试（metadata可考虑支持sqlite等简化测试）

支持小文件合并。

object storage支持多故障域，多集群，异构多集群

支持提供工具，从NFS导入数据，然后经过rgw访问NFS

问题：
1，datalog，bilog保序问题
基于时间顺序？mongodb似乎没有自增字段。${inc}

2，并发写入冲突
每次写多版本，后写入的就是current，不存在歧义。
老版本由gc清理。但是多版本信息是放入一个entry的，存在覆盖的情况。

3，但是bilog顺序如何与bi顺序保持一致？
bi上对象按时间排序，bilog的key也包含一个时间？
这样系统都依赖时间，一旦跳变，可能会乱套。
考虑下没有事务的方案，以及有事务的方案？
begin
get entry
put entry
add bilog 
add datalog
end




4, 数据库解决应用层的并发问题？

5，metadata缓冲方案

SmartX的元数据方案：
使用paxos协议确保log一致。
每个节点回放log来达到数据一致。
但是该方案虽然解决了zookeeper或etcd内存数据量的限制，
但是仍然受限于磁盘，无法无限扩展。要实现无限扩展必须shard。

newsql系统对于这个需求有点过了。我们并不做通用性假设。可以加上一些约束限制以简化系统。
这里对于事务的要求其实只有一点：compare write。
datalog和bilog，可以先写，大不了失败了撤销操作。
但是有一点bilog的顺序与复制有关系。可以先get获取到对应的版本。
bilog中记录版本，replay的时候需要注意版本。可能小版本的后执行。
写入时compare版本，如果对应版本存在，则不能写入，说明出现冲突了。

get 5
bilog v6.xx1
put 6

如果6已经存在，则put 6失败，撤销操作(or重试)

这时bilog可能是这样的：
bilog v6.xx2
bilog v6.xx1 显然总有一个是不需要replay的。不会造成不一致。

但是仍然存在一些关联修改：如果统计对象总数？这个需要非常精确吗？

1，支持简化的ACID(compare write)，mongodb支持findandmodify命令
    多表事务，目前看不是很需要。
2，不支持并发
    最好还是支持，至少读要支持 
3，不支持分区
    从数据规模来看，这个有难度，也许实现不了。
4，支持持久化
    这个是必须的，纯内存型的不满足要求
5，数据量支持100亿级别（按一个key 1K计算，有效容量需要10TB，不分区的情况下如何支持？）
6，支持range查询
    企业市场有不少客户还是需要这个的。hash方式查询成本偏高。当然两种都支持最好。
7，支持create(防止并发创建)
8，支持自增字段。

基于zookeeper, etcd的方案都不具备该特点。
newsql跨表事务不是很需要。
目前看首选是mongodb


6，mongodb有限制range shard的key必须是数字么？

外围工具开发可以基于数据库，开发语言也可以多样化。
sync过来的操作写bilog，但是需要注明(sync_from),在多站点异构部署下有用，假设一个分支从另一个分支同步数据，但不从master同步数据

同步考虑的其实只有一点：就是版本与修改时间。
如果本地zone的最新版本修改时间近，就应该以本地时间的版本作为最新。
olh_epoch又没法在zone之间同步，无法作为排序依据。

系统元数据必须搞到mongodb，rados是可替代的。这对于上层系统影响很大。
如果om仍然基于rados设计，那么就不满足要求。

## 一致性的考虑

### 元数据一致性

剪除对cls的依赖，走标准接口对接rados。




