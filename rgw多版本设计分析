原文地址
http://tracker.ceph.com/projects/ceph/wiki/RGW_Object_Versioning

## 特性描述

> One of the next features that we're working on is the long due object versioning. This basically allows keeping old versions of objects inside buckets, even if user has removed or overwritten them. Any object instance is immutable. and object can then be fetched by the version (instance) id of that object.

这段就是描述多版本特性的目标了，就是为了保留多个版本，防止覆盖写和误删除。


> When removing the object without specifying a version, a new deletion marker is created. It is, however, possible to remove a specific object version, and in this case the version is not accessible anymore. What complicates things is that if the current object's version (the one that is accessed when accessing the object without specifying a version) is removed, then the object will then point at its previous version. Permissions are set on the object version level.

这一段是描述多版本的行为。怎么实现防覆盖写和误删除？

- 不存在覆盖写，所有写都是产生新版本
- 对象的删除不是真的删除，只会产生delete marker
- 支持真正的删除，需要指定版本来删除，并且删除当前版本的话，会指向上一个版本。

上述就是多版本写和删除操作的行为。

> Reading of an object that was removed without specifying the version id, then returns a 404. In that case the underlying object instance is not removed, and instead a new deletion marker is created. The object logical head then moves to point at the marker. If, however, you remove the object version itself (by specifying the version id), then the object logical head will move to the previous version. Another requirement is the ability to list all objects and versions of the objects. This means that when listing objects we either need to list only the current objects, or both the current objects and their respective versions.

这段是说读的情况，可以读具体某个版本的数据，并且可以list对象的版本，这需要在bucket list请求中增加参数versions, slave zone与 master zone做full sync用了就需要list versions. 也可以在s3 browser等工具中查看对象的版本。

> One thing to note is that object versioning needs to be switched on for the bucket for the feature to be activated, and once it's switched on it can only be suspended. This means that newly created objects will not be versioned, but old versions will still be accessible.

bucket多版本有三种状态
1. 无多版本
2. 多版本
3. 多版本挂起

一旦开启多版本，就只能挂起，不能关闭。

多版本的功能列表：

- ability to list objects and versions
- ability to read specific object version
- ability to remove a specific object version (*)
- object creation / overwrite creates a new object version, object points at new instance
- object removal does not remove object instance, creates a deletion marker
- (*) removal of the current object version rolls back object to point at previous object version
- permissions affect the object version and can be set on the versions
- a GET can still be serviced by going directly to librados objects, without consulting an index (and breaking read-side bucket scalability)
- a bucket listing is still reasonably efficient (normally performed by consulting the index object only).

上述都是讲多版本的功能特征的。
下面就是到实现设计部分了。

## 实现原理

> Now, considering this functionality, it seems that we need to deal
with 3 different entities: 
> - bucket index
> - object instances (versions)
> - object logical head (olh)

为什么必须处理这三个对象呢？ bucket index是必须处理的，以确保能够正确的响应bucket list versions命令。olh也是必须维护的，否则不知道读取哪个对象版本。object instance主要涉及删除操作，在删除的时候，需要从bi出发，来删除对象。


olh 是一个特殊的对象，它指向对象的某个版本，这个在多版本之前是不存在的。olh有一点比较复杂，就是在rados上存储时，其与null instance是重叠的。这一点使得情况变得复杂：
1. olh的mtime与null instance的mtime混合，引起对象在同步时，时间判断错误的问题
2. null instance的删除处理变得不一样，再删除掉之后，还得重建olh
3. 在多版本挂起的时候，null instance与olh合二为一，行为上null instance不是一个普通的instance
4. bucket开启多版本之后，需要将null instance的instance key convert从而避免与olh重复，参见*convert_plain_entry_to_versioned*

这也给multisite同步造成了困扰，多版本相关的同步bug有些也因此而起。
为什么必须这样呢？ 这应该说有点历史包袱，如果不论bucket是否有多版本都存在olh，那么剥离olh和null instance就很自然，但是这样就和之前的设计差别比较大，不容易自然的过渡到多版本上。

>The first two can be mapped nicely into the already existing structures. The existing bucket index will be extended to keep the list of versions, and our current rgw objects will be used to handle the object instances, as they serve the same function. There is one differnce, though: before the head would be addressible by the object name, whereas here it is object name + tag/version, so that the heads don't collide with other object versions.

这一段解释了为什么需要olh。

>One of the options that we can consider for the object logical head is also to use a regular object that will just have a copy of the appropriate instance manifest. It doesn't seem that this will function as needed, as it doesn't satisfy the last requirement (permissions are set at the version level). What we do need to have is some sort of a soft link that will be used to point at the appropriate object instance.

这段说明了olh的本质，就是指向object instances的soft link，其他一切属性都是属于object instance的（这里instance有时等价于versionId，也就是对象的某个版本）

>We had internal discussions on how to make everything work together. There are a few things that we need to be careful about. We need to make sure that the bucket index listing reflects the status of the actual objects. When the olh points at a specific version, we shouldn't show a different view when listing the objects. This gets even more complicated when removing an object version that requires olh change, as we have 3 different entities that we need to sync. Note that rados does not have multi-object transactions (for now), and we traditionally avoided locking for rgw object operations (those 3 entities being the index, the object version, and the olh pointer).

要满足上述所有特征，功能 设计上的困难。


>The current scheme is that we update the bucket index using a 2 phase commit, and it follows up on the objects state. So when adding / removing an object, we first tell the bucket index to 'prepare' for the operation, then do the operation, and eventually we let the bucket index know about the completion. For ordering we rely on the pg versioning system that gives us insight into the timeline, so that when two concurrent operations happen on the same object the bucket index can figure out who won and who is dead. This system as it is doesn't really work with versioning as we have both the olh, and the object instances. This is one of the solutions that we came up with: 

这段说的是非多版本下，如果保证object instance和 bi的一致性。  
主要靠3点:
1. id tag 防止多个rgw同时修改一个对象, 写之前先要读id tag，写的时候做2件事，一是对比id tag，二是更新id tag。对比失败则不执行写操作。这个可防止写期间对象被其他rgw修改。
2. bucket index的complete的顺序，这个是使用pg version来保证的。确保不会出现这种现象：先执行的写后更新bucket index，这样就乱序了，影响bucket index内容的正确性。
3. 如果出现故障，在list bucket index的时候通过prepare的标记可知道对象可能发生变更，然后根据obj state的实际情况来更新bucket index。



> - The bucket index will be the source of the truth
> - The bucket index will serve as an operational log for olh operations

以bucket index为核心的主要原因可能是为了方便实现list，delete marker等需求。逻辑的重头放在了bucket index上。bi上增加了op log来保证olh相关修改的一致性。

**bucket无多版本时，以object instance为核心，所以即便出现故障也不必在读的时候做恢复，只有list objects的时候需要根据object state修正bucket index中的信息。而开启多版本之后，get的时候可能需要去bucket index获取olh operation log来恢复，然后再读取。**

> The bucket index will index every object instance in reverse order (from new to old). The bucket index will keep entries for deletion markers.
The bucket index will also keep operations journal for olh modifications. Each operation in this journal will have an id that will be increased monotonically, and that will be tied into current olh version. The olh will be modified using idempotent operations that will be subject to having its current version smaller than the operation id.
The journal will be used for keeping order, and the entries in the journal will serve as a blueprint that the gateways will need to follow when applying changes. In order to ensure that operations that needed to be complete were done, we'll mark the olh before going to the bucket index, so that if the gateway died before completing the operation, next time we try to access the object we'll know that we need to go to the bucket index and complete the operation.

olh epoch就是journal的顺序编号，journal必须顺序执行，删除只能trim，无法从中间删除。这些都是为了确保必须按journal顺序来执行。
在rgw故障的时候，如果读取的是olh，会执行follow_olh来执行journal。

olh epoch还承载了对象版本之间顺序的信息，并且这个信息会向其他zone同步。olh epoch的分配是在bucket index上进行的。

在读取对象信息时，会先经过olh，如果olh上有pending标记，则会读取journal然后apply。

pending中的key就是op tag,与bucket index中的op_tag对应。


# 数据结构
bi数据：

> assert.h(olh， plain entry)  
assert.hv912i.Hfas8eS9OX5qEFEoReaAFHsVuR0An2（list index）  
assert.hv913iy0HzZ-9baP2nVsY0Bit.uYgqe-zXfLC  
assert.hv914i（null instance list index）  
0_00000000001.35.2(bi log)  
0_00000000002.36.3  
0_00000000003.37.2  
0_00000000004.38.3  
0_00000000005.39.12  
0_00000000006.41.2  
0_00000000007.42.3  
0_00000000008.43.11  
1000_assert.hi（null instance）  
1000_assert.hi.Hfas8eS9OX5qEFEoReaAFHsVuR0An2（instance）  
1000_assert.hiy0HzZ-9baP2nVsY0Bit.uYgqe-zXfLC  
1001_assert.h（olh entry，olh operation log就在这里）

上述assert.h对象有三个instance
- null
- .Hfas8eS9OX5qEFEoReaAFHsVuR0An2
- y0HzZ-9baP2nVsY0Bit.uYgqe-zXfLC

每种bi记录的类型可对比下面：
```
#define BI_BUCKET_OBJS_INDEX          0
#define BI_BUCKET_LOG_INDEX           1
#define BI_BUCKET_OBJ_INSTANCE_INDEX  2
#define BI_BUCKET_OLH_DATA_INDEX      3

#define BI_BUCKET_LAST_INDEX          4

static string bucket_index_prefixes[] = { "", /* special handling for the objs list index */
                                          "0_",     /* bucket log index */
                                          "1000_",  /* obj instance index */
                                          "1001_",  /* olh data index */

                                          /* this must be the last index */
                                          "9999_",};
```

其中list index用于排序，instance idx是兼容非多版本的。因为在修改olh之前，2阶段修改obj instance的时候是不知道具体的index编号的，list index的编号即来自olh epoch。

## 关键函数

```
int RGWRados::set_olh(RGWObjectCtx& obj_ctx, RGWBucketInfo& bucket_info, rgw_obj& target_obj, bool delete_marker, rgw_bucket_dir_entry_meta *meta,
                      uint64_t olh_epoch, real_time unmod_since, bool high_precision_time)
static int rgw_bucket_link_olh(cls_method_context_t hctx, bufferlist *in, bufferlist *out)
```
RGWRados::set_olh是rgw调用的函数， rgw_bucket_link_olh是对应的osd cls的函数。
这2个函数实现了多版本特性的核心功能。

```
int RGWRados::unlink_obj_instance(RGWObjectCtx& obj_ctx, RGWBucketInfo& bucket_info, rgw_obj& target_obj,
                                  uint64_t olh_epoch)
static int rgw_bucket_unlink_instance(cls_method_context_t hctx, bufferlist *in, bufferlist *out)
```
这两个函数是用来实现指定版本删除的。


```
int RGWRados::follow_olh(RGWObjectCtx& obj_ctx, RGWObjState *state, rgw_obj& olh_obj, rgw_obj *target)
```
这里读取olh operation log，replay log实现故障恢复。


## 其他思考

1，该方案比较复杂，该方案有一个前提条件是Get请求不经过bucket index，以取得最大的读性能。否则直接使用bucket index存放各种元数据，实现就简单很多。

2，一致性问题，如果对象修改，bi complete都成功。但是没有set olh。这种情况不修改olh是否有问题呢？

可能是没问题的，相当于修改没成功？ 但是有残留。

3，多版本只影响对象head部分的操作，分片或者shadow的对象不会受到影响。

4，注意多版本在副本同步时，同步的都是具体的object instance，然后触发对应的olh修改。同步不会产生新的版本。
同步最好按顺序执行，否则object instance按照olh epoch的顺序与主本不一致，这样可能导致olh指向的object instance在master与slave不一样。

5，目前不支持MFA Delete

## 遗留问题

1，olh tag的作用是什么？

仅仅是create/delete olh期间保护吗？ 为什么需要这种保护？

2，多版本相关的各种一致性保护，在极端情况下究竟是否能保证一致性？有例外场景吗？

journal保证了olh对象上的执行顺序，不会出现index与olh不一致的情况。
